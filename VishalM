
function reqfordatag(segment) {
    var sdatastr = "bid=" + segment + ":read=1:";
    if (segment == "trends") {
        sdatastr +=
            "val=" +
            $("input[type=radio][name=trnd]:checked").attr("data-value") +
            ":";
    } else if (segment == "amp") {

        sdatastr += "val1=" + $('input[type=radio][name=slamp]:checked').attr('data-value') + ":" + "val2=" + $('input[type=radio][name=ampli]:checked').attr('data-value') + ":";
        console.log(sdatastr);
    }
    $.ajax({
          url: "http://192.168.4.213/datamgmt.html",
            method: "POST",
            data: sdatastr,
        })
        .done(function(rdata) {
            parseandplacedata(rdata);
        })
        .fail(function(data) {
            console.log("Failed:");
        })
        .always(function() {});
}

function reqforsagnswell() {
    var val = parseInt(
        $("input[type=radio][name=snsp]:checked").attr("data-value")
    );
    reqfordatag("sr" + val);
    reqfordatag("sy" + val);
    reqfordatag("sb" + val);
}

function reloadphaserdiag() {
    canvas.width = $(par).width() - 5;
    canvas.height = $(par).height() - 5;
    Initdraw();
}

function Initdraw() {
    if (canvas.getContext) {
        var context = canvas.getContext("2d");
        var centerX = canvas.width / 2.5;
        var centerY = canvas.height / 2;
        var radius = VmaxPpx;
        var angle = 0;
        var tox = 0;
        var toy = 0;
        var colordR = "rgba(255, 0, 0,0.3)";
        var colordY = "rgba(255, 255, 0,0.3)";
        var colordB = "rgba(0, 0, 255,0.7)";

        var linewidthR = 2;
        var linewidthY = 2;
        var linewidthB = 2;
        var legend = {
            width: 150,
            height: 50,
            bordercolor: "#FFFFFF",
            trheight: 20,
            tdwidth: 30,
        };
        legend.height = legend.trheight * 6;
        legend.width = legend.tdwidth * 3;
        var linedashV = [10, 2];
        var linedashI = [2, 2];

        /* circle */
        context.beginPath();
        context.lineWidth = 1;
        context.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        context.strokeStyle = "#FFFFFF";
        context.stroke();

        /* Legend */
        context.beginPath();
        context.lineWidth = 1;
        context.strokeStyle = legend.bordercolor;
        context.strokeRect(
            canvas.width - legend.width,
            0,
            legend.width,
            legend.height
        );

        context.beginPath();
        var legendstartX = canvas.width - legend.width;

        context.font = "italic small 200 12px courier";
        context.textAlign = "center";
        context.strokeText(
            "Vr",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 0
        );
        context.strokeText(
            "Vy",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 1
        );
        context.strokeText(
            "Vb",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 2
        );
        context.strokeText(
            "Ir",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 3
        );
        context.strokeText(
            "Iy",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 4
        );
        context.strokeText(
            "Ib",
            legendstartX + (legend.tdwidth * 3 - legend.tdwidth / 2),
            legend.trheight / 1.5 + legend.trheight * 5
        );

        var padding = 5;

        context.setLineDash(linedashV);
        context.strokeStyle = colorR;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 1 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 1 - legend.trheight / 2
        );
        context.stroke();

        context.strokeStyle = colorY;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 2 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 2 - legend.trheight / 2
        );
        context.stroke();

        context.strokeStyle = colorB;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 3 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 3 - legend.trheight / 2
        );
        context.stroke();

        context.setLineDash(linedashI);
        context.strokeStyle = colorR;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 4 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 4 - legend.trheight / 2
        );
        context.stroke();

        context.strokeStyle = colorY;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 5 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 5 - legend.trheight / 2
        );
        context.stroke();

        context.strokeStyle = colorB;
        canvas_line(
            context,
            legendstartX + padding,
            legend.trheight * 6 - legend.trheight / 2,
            canvas.width - legend.tdwidth,
            0 + legend.trheight * 6 - legend.trheight / 2
        );
        context.stroke();

        context.setLineDash([]);
        context.strokeStyle = legend.bordercolor;

        /* r phase default axis */
        context.beginPath();
        context.lineWidth = 1;
        context.moveTo(centerX, centerY);
        angle = 0;
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colordR;
        context.stroke();

        /* y phase default axis  */
        context.beginPath();
        context.lineWidth = 1;
        context.moveTo(centerX, centerY);
        angle = 120;
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colordY;
        context.stroke();

        /* b phase default axis  */
        context.beginPath();
        context.lineWidth = 1;
        context.moveTo(centerX, centerY);
        angle = 240;
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colordB;
        context.stroke();

        context.setLineDash(linedashV);
        /* Vr phase default axis */
        angle = god.pvr.data[0][1];
        radius = god.pvr.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthR;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorR;
        context.stroke();

        /* Vy phase default axis  */
        angle = god.pvy.data[0][1];
        radius = god.pvy.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthY;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorY;
        context.stroke();

        /* Vb phase default axis  */
        angle = god.pvb.data[0][1];
        radius = god.pvb.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthB;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorB;
        context.stroke();

        context.setLineDash(linedashI);

        /* Ir phase default axis */
        angle = god.pir.data[0][1];
        radius = god.pir.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthR;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorR;
        context.stroke();

        /* Iy phase default axis  */
        angle = god.piy.data[0][1];
        radius = god.piy.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthY;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorY;
        context.stroke();

        /* Ib phase default axis  */
        angle = god.pib.data[0][1];
        radius = god.pib.data[1][1];
        context.beginPath();
        context.lineWidth = linewidthB;
        context.moveTo(centerX, centerY);
        tox = centerX + radius * Math.cos((Math.PI * angle) / 180.0);
        toy = centerY - radius * Math.sin((Math.PI * angle) / 180.0);
        canvas_arrow(context, centerX, centerY, tox, toy, angle, radius);
        context.strokeStyle = colorB;
        context.stroke();
    }
}


function canvas_line(context, fromx, fromy, tox, toy) {
    context.beginPath();
    context.moveTo(fromx, fromy);
    context.lineTo(tox, toy);
}

function canvas_arrow(context, fromx, fromy, tox, toy, angle, radius) {
    var headlen = 10; /* length of head in pixels */
    var dx = tox - fromx;
    var dy = toy - fromy;
    var angle = Math.atan2(dy, dx);
    context.moveTo(fromx, fromy);
    context.lineTo(tox, toy);
    context.lineTo(
        tox - headlen * Math.cos(angle - Math.PI / 6),
        toy - headlen * Math.sin(angle - Math.PI / 6)
    );
    context.moveTo(tox, toy);
    context.lineTo(
        tox - headlen * Math.cos(angle + Math.PI / 6),
        toy - headlen * Math.sin(angle + Math.PI / 6)
    );
}
$(document).ready(function() {
    var x = [
        []
    ];
    vryb = $.plot("#vryb", x, options);
    rvi = $.plot("#rvi", x, options);
    yvi = $.plot("#yvi", x, options);
    bvi = $.plot("#bvi", x, options);
    sryb = $.plot("#sryb", x, options);
    trends = $.plot("#trends", x, options2);
    ampl = $.plot("#ampligraph", x, options1);

    function assignlables() {
        /*#ampligraph*/
        $("#vryb,#sryb").each(function(i, v) {
            var xaxisLabel = $("<div class='axisLabel xaxisLabel'></div>")
                .text("Time")
                .appendTo(v);
            var yaxisLabel = $("<div class='axisLabel yaxisLabel'></div>")
                .text("Voltage")
                .appendTo(v);
            yaxisLabel.css("margin-top", yaxisLabel.width() / 2 - 20);
            yaxisLabel.css("margin-bottom", 5);
        });
    }
    assignlables();

    function assignlables1() {
        /*#ampligraph*/
        $("#ampligraph").each(function(i, v) {
            var xaxisLabel = $("<div class='axisLabel xaxisLabel'></div>")
                .text("Order")
                .appendTo(v);
            var yaxisLabel = $("<div class='axisLabel yaxisLabel'></div>")
                .text("Percentage")
                .appendTo(v);
            yaxisLabel.css("margin-top", yaxisLabel.width() / 2 - 20);
            yaxisLabel.css("margin-bottom", 5);
        });
    }
    assignlables1();

    function assignlables2() {
        /*Phase wise*/
        $("#rvi,#yvi,#bvi").each(function(i, v) {
            var xaxisLabel = $("<div class='axisLabel xaxisLabel'></div>")
                .text("Time")
                .appendTo(v);
            var yaxisLabel = $("<div class='axisLabel yaxisLabel'></div>")
                .text("Voltage & Current")
                .appendTo(v);
            yaxisLabel.css("margin-top", yaxisLabel.width() / 2 - 20);
            yaxisLabel.css("margin-bottom", 5);
        });
    }
    assignlables2();

    setInterval(reqfordatag, 1000, "vr");
    setInterval(reqfordatag, 1000, "vy");
    setInterval(reqfordatag, 1000, "vb");
    setInterval(reqfordatag, 1000, "ir");
    setInterval(reqfordatag, 1000, "iy");
    setInterval(reqfordatag, 1000, "ib");
    setInterval(reqforsagnswell, 1000);
    setInterval(reqfordatag, 1000, "phd");
    reqfordatag("trends");
    reqfordatag("amp");
    setInterval(reqfordatag, 7000, "trends");
    setInterval(reqfordatag, 10000, "amp");
    /*setInterval(function loadharmonics() {
          for (var i = 0; i < 4; i++) {
              reqfordatag("amp" + i);
          }
      }, 5000);*/

    $("<div id='tooltip'></div>")
        .css({
            position: "absolute",
            display: "none",
            border: "1px solid #000000",
            padding: "2px",
            "background-color": "#cccccc",
            color: "#000000",
        })
        .appendTo("body");

    $("#trends").bind("plothover", function(event, pos, item) {
        if (item) {
            var selected = $("input[type=radio][name=trnd]:checked").attr(
                "data-value"
            );
            var extension = {
                ty: "",
                td: "",
                th: "Hrs",
                k: "k",
            };
            var ticks = trends.getAxes().xaxis.ticks;
            var x = ticks[ticks.length - (item.dataIndex + 2)].label;
            var y = item.datapoint[1];
            if (selected == 0) {
                $("#tooltip")
                    .html("[" + x + extension.th + " , " + y + extension.k + "]")
                    .css({
                        top: item.pageY - 10,
                        left: item.pageX + 5,
                    })
                    .fadeIn();
            } else if (selected == 1) {
                $("#tooltip")
                    .html("[" + x + extension.td + " , " + y + extension.k + "]")
                    .css({
                        top: item.pageY - 10,
                        left: item.pageX + 5,
                    })
                    .fadeIn();
            } else if (selected == 2) {
                $("#tooltip")
                    .html("[" + x + extension.ty + " , " + y + extension.k + "]")
                    .css({
                        top: item.pageY - 10,
                        left: item.pageX + 5,
                    })
                    .fadeIn();
            } else {}
        } else {
            $("#tooltip").hide();
        }
    });
    /*,#ampligraph*/
    $("#vryb,#rvi,#yvi,#bvi,#sryb").bind("plothover", function(
        event,
        pos,
        item
    ) {
        if (item) {
            var y = item.datapoint[1];
            $("#tooltip")
                .html("[" + y + "]")
                .css({
                    top: item.pageY - 10,
                    left: item.pageX + 5,
                })
                .fadeIn();
        } else {
            $("#tooltip").hide();
        }
    });


    $("#ampligraph").bind("plothover", function(event, pos, item) {
        if (item) {
            var y = item.datapoint[1];
            $("#tooltip").html("[" + y + "]")
                .css({
                    top: item.pageY - 10,
                    left: item.pageX + 50
                })
                .fadeIn();
        } else {
            $("#tooltip").hide();
        }
    });

    $("input[type=radio][name=trnd]").change(function() {
        reqfordatag("trends");
    });

    $('input[type=radio][name=ampli]').change(function() {
        reqfordatag("amp");
    });
});
